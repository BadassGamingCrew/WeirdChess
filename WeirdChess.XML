<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WeirdChess</name>
    </assembly>
    <members>
        <member name="T:WeirdChess.Core.GameEngine">
            <summary>
            This is the main type for your game.
            </summary>
        </member>
        <member name="M:WeirdChess.Core.GameEngine.Initialize">
            <summary>
            Allows the game to perform any initialization it needs to before starting to run.
            This is where it can query for any required services and load any non-graphic
            related content.  Calling base.Initialize will enumerate through any components
            and initialize them as well.
            </summary>
        </member>
        <member name="M:WeirdChess.Core.GameEngine.LoadContent">
            <summary>
            LoadContent will be called once per game and is the place to load
            all of your content.
            </summary>
        </member>
        <member name="M:WeirdChess.Core.GameEngine.UnloadContent">
            <summary>
            UnloadContent will be called once per game and is the place to unload
            game-specific content.
            </summary>
        </member>
        <member name="M:WeirdChess.Core.GameEngine.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Allows the game to run logic such as updating the world,
            checking for collisions, gathering input, and playing audio.
            </summary>
            <param name="gameTime">Provides a snapshot of timing values.</param>
        </member>
        <member name="M:WeirdChess.Core.GameEngine.Draw(Microsoft.Xna.Framework.GameTime)">
            <summary>
            This is called when the game should draw itself.
            </summary>
            <param name="gameTime">Provides a snapshot of timing values.</param>
        </member>
        <member name="T:WeirdChess.Enums.GameScreenType">
            <summary>
            Enumeration for the types of the different IGameScreen objects
            </summary>
        </member>
        <member name="T:WeirdChess.Enums.MusicOptions">
            <summary>
            Enumeration for the Music Options
            </summary>
        </member>
        <member name="T:WeirdChess.Enums.SettingType">
            <summary>
            Enumeration for the different types of settings
            </summary>
        </member>
        <member name="T:WeirdChess.Enums.SoundOptions">
            <summary>
            Enumeration for the Sound Options
            </summary>
        </member>
        <member name="T:WeirdChess.Exceptions.DrawableComponentException">
            <summary>
            Exception for DrawableComponent objects. Extends System ArgumentException
            </summary>
        </member>
        <member name="M:WeirdChess.Exceptions.DrawableComponentException.#ctor(System.String)">
            <summary>
            Constructor that takes a string message as argument
            </summary>
            <param name="message">The error message to be passed to the base class</param>
        </member>
        <member name="T:WeirdChess.Exceptions.GameScreenTypeException">
            <summary>
            Exception class for GameScreenType enumeration.
            </summary>
        </member>
        <member name="M:WeirdChess.Exceptions.GameScreenTypeException.#ctor(System.String,System.String)">
            <summary>
            Exception construtor. Takes two arguments, which are then passed to the base constructor.
            </summary>
            <param name="paramName">The param name</param>
            <param name="message">The outer exception message</param>
        </member>
        <member name="T:WeirdChess.Exceptions.InvalidSettingValueException">
            <summary>
            Exception for Invalid values for ISetting objects. Extends ArgumentOutOfRangeException
            </summary>
        </member>
        <member name="M:WeirdChess.Exceptions.InvalidSettingValueException.#ctor(System.String,System.String)">
            <summary>
            Constructor which takes two argumens and passes them to the base class.
            </summary>
            <param name="paramName">The name of the invalid parameter.</param>
            <param name="message">The error message associated with the error context.</param>
        </member>
        <member name="T:WeirdChess.Exceptions.IteratorOutOfRangeException">
            <summary>
            Exception class for IITerator objects
            </summary>
        </member>
        <member name="M:WeirdChess.Exceptions.IteratorOutOfRangeException.#ctor(System.String,System.String)">
            <summary>
            Exception construtor. Takes two arguments, which are then passed to the base constructor.
            </summary>
            <param name="paramName">The param name</param>
            <param name="message">The outer exception message</param>
        </member>
        <member name="T:WeirdChess.GameMain">
            <summary>
            The main class.
            </summary>
        </member>
        <member name="M:WeirdChess.GameMain.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:WeirdChess.Infrastructure.DrawableScreen">
            <summary>
            Abstract class for Drawable Screen objects. Implements IDrawable
            </summary>
        </member>
        <member name="T:WeirdChess.Interfaces.IDrawable">
            <summary>
            Interface for Drawable objects
            </summary>
        </member>
        <member name="M:WeirdChess.Interfaces.IDrawable.Draw">
            <summary>
            Method for drawing notification
            </summary>
        </member>
        <member name="M:WeirdChess.Infrastructure.DrawableScreen.#ctor(WeirdChess.Interfaces.IGameScreen,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Constructor for the Drawable Screen objects. Takes IGameScreen and SpriteBatch as arguments
            </summary>
            <param name="gameScreen">The IGameScreen object associated with this DrawableScreen</param>
            <param name="spriteBatch">The SpriteBatch used for the Draw method</param>
        </member>
        <member name="M:WeirdChess.Infrastructure.DrawableScreen.UpdateSpriteBatch(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Method for changing the SpriteBatch object, associated with this current object.
            </summary>
            <param name="spriteBatch">The new SpriteBatch object</param>
        </member>
        <member name="T:WeirdChess.Infrastructure.MusicSetting">
            <summary>
            Concrete class for MusicSetting ISetting objects
            </summary>
        </member>
        <member name="T:WeirdChess.Infrastructure.Setting">
            <summary>
            Abstract class for ISetting objects
            </summary>
        </member>
        <member name="T:WeirdChess.Interfaces.ISetting">
            <summary>
            An interface for Setting objects. Throws exception if an invalid value is used in object initialization.
            <exception cref="T:WeirdChess.Exceptions.InvalidSettingValueException">Thrown when an invalid value us passed to the object constructor.</exception>
            </summary>
        </member>
        <member name="P:WeirdChess.Interfaces.ISetting.Type">
            <summary>
            The type of the setting object.
            </summary>
        </member>
        <member name="P:WeirdChess.Interfaces.ISetting.Value">
            <summary>
            The value of the setting object.
            </summary>
        </member>
        <member name="M:WeirdChess.Infrastructure.Setting.#ctor(WeirdChess.Enums.SettingType,System.Object,System.Object[],System.String)">
            <summary>
            Constructor which takes two arguments.
            </summary>
            <param name="type">The Setting Type of the ISetting object</param>
            <param name="value">The value for the ISetting object</param>
            <param name="validValues">Collection of valid values for this SettingType</param>
            <param name="valueErrorMessage">The error message to be thrown, if an InvalidSettingValueException occurs</param>
        </member>
        <member name="M:WeirdChess.Infrastructure.MusicSetting.#ctor">
            <summary>
            Default constructor with no parameters.
            Creates an object using the DefaultValue constant.
            </summary>
        </member>
        <member name="M:WeirdChess.Infrastructure.MusicSetting.#ctor(WeirdChess.Enums.MusicOptions)">
            <summary>
            Constructor which takes a value parameter.
            </summary>
            <param name="value">The value for the MusicSetting object.</param>
        </member>
        <member name="T:WeirdChess.Infrastructure.ScreenResolutionSetting">
            <summary>
            Concrete class for ScreenResolution ISetting objects
            </summary>
        </member>
        <member name="M:WeirdChess.Infrastructure.ScreenResolutionSetting.#ctor">
            <summary>
            Default constructor with no parameters.
            Creates an object using the DefaultValue constant.
            </summary>
        </member>
        <member name="M:WeirdChess.Infrastructure.ScreenResolutionSetting.#ctor(System.String)">
            <summary>
            Constructor which takes a value parameter.
            </summary>
            <param name="value">The value for the ScreenResolution object.</param>
        </member>
        <member name="T:WeirdChess.Interfaces.IComponent">
            <summary>
            Interface for Component objects
            </summary>
        </member>
        <member name="M:WeirdChess.Interfaces.IComponent.Initilize">
            <summary>
            Method for initializing the Component object.
            </summary>
        </member>
        <member name="M:WeirdChess.Interfaces.IComponent.Update">
            <summary>
            Method for update notification.
            </summary>
        </member>
        <member name="T:WeirdChess.Infrastructure.Screen">
            <summary>
            Abstract class for Screen objects. 
            Implements IGameScreen, IComponent and IDrawableComponent
            </summary>
        </member>
        <member name="T:WeirdChess.Interfaces.IGameScreen">
            <summary>
            Interface for GameScreen objects
            </summary>
        </member>
        <member name="P:WeirdChess.Interfaces.IGameScreen.Type">
            <summary>
            The Type of the current GameScreen object.
            </summary>
        </member>
        <member name="P:WeirdChess.Interfaces.IGameScreen.Displayed">
            <summary>
            Specifies if the current GameScreen object is on focus.
            True if the current screen is on focus.
            False if the curent screen is not on focus.
            </summary>
        </member>
        <member name="T:WeirdChess.Interfaces.IDrawableComponent">
            <summary>
            Interface for Drawable Components
            </summary>
        </member>
        <member name="P:WeirdChess.Interfaces.IDrawableComponent.DrawableComponent">
            <summary>
            Property which holds the Drawable Component of the Component object
            </summary>
        </member>
        <member name="M:WeirdChess.Infrastructure.Screen.#ctor(WeirdChess.Enums.GameScreenType)">
            <summary>
            Consctructor for Screen objects. Takes a GameScreenType enum as argument
            </summary>
            <param name="type">The Type of the Screen object</param>
        </member>
        <member name="P:WeirdChess.Infrastructure.Screen.Type">
            <summary>
            GameScreenType property. The setter is private since the value should be read-only.
            </summary>
        </member>
        <member name="P:WeirdChess.Infrastructure.Screen.Displayed">
            <summary>
            Boolean property specifying whether the screen should be displayed, or not.
            </summary>
        </member>
        <member name="P:WeirdChess.Infrastructure.Screen.DrawableComponent">
            <summary>
            Property containing the IDrawable object for this current object.
            The setter is protected, since the child classes will be responcible for specifying the IDrawable object.
            </summary>
        </member>
        <member name="T:WeirdChess.Infrastructure.ScreenController">
            <summary>
            IScreenController implementation.
            Extends GameComponent.
            </summary>
        </member>
        <member name="T:WeirdChess.Interfaces.IScreenController">
            <summary>
            Interface for Screen Controller objects.
            Provides methods for managing the IGameScreen collection.
            Extends IComponent.
            Also provides an iterator for navigating between the different IGameScreen objects.
            </summary>
        </member>
        <member name="T:WeirdChess.Interfaces.IIterable`1">
            <summary>
            Interface for iterable objects.
            </summary>
            <typeparam name="T">The type of objects that the iterator will iterate through</typeparam>
        </member>
        <member name="M:WeirdChess.Interfaces.IIterable`1.GetIterator">
            <summary>
            Method for retreiving an iterator of generic type T
            </summary>
            <returns>An iterator for navigating between objects of generic type T</returns>
        </member>
        <member name="M:WeirdChess.Interfaces.IScreenController.SetScreen(WeirdChess.Enums.GameScreenType,WeirdChess.Interfaces.IGameScreen)">
            <summary>
            Changes the value for the GameScreenType argument, to the IGameScreen argument.
            </summary>
            <exception cref="T:WeirdChess.Exceptions.GameScreenTypeException">Thrown if screenType value does not match the gameScreen.Type value</exception>
            <param name="screenType">The screen type for the IGameScreen that's to be replaced.</param>
            <param name="gameScreen">The new IGameScreen object</param>
        </member>
        <member name="M:WeirdChess.Interfaces.IScreenController.AddScreen(WeirdChess.Enums.GameScreenType,WeirdChess.Interfaces.IGameScreen)">
            <summary>
            Adds a new GameScreenType/IGameScreen pair to the IGameScreen collection.
            </summary>
            <exception cref="T:WeirdChess.Exceptions.GameScreenTypeException">Thrown if the a pair with the same GameScreenType already exists.</exception>
            <param name="screenType">The GameScreenType value for the new pair.</param>
            <param name="gameScreen">The IGameScreen object for the new pair.</param>
        </member>
        <member name="M:WeirdChess.Interfaces.IScreenController.DeleteScreen(WeirdChess.Enums.GameScreenType)">
            <summary>
            Deletes the GameScreenType/IGameScreen pair, described by the screenType argument.
            </summary>
            <param name="screenType">The GameScreenType for the GameScreenType/IGameScreen pair that will be deleted.</param>
            <exception cref="T:WeirdChess.Exceptions.GameScreenTypeException">Thrown if method is called and Contains(screenType) returns FALSE.</exception>
            <returns>Returns the IGameScreen object, from the deleted GameScreenType/IGameScreen pair.</returns>
        </member>
        <member name="M:WeirdChess.Interfaces.IScreenController.GetScreen(WeirdChess.Enums.GameScreenType)">
            <summary>
            Attempts to get the IGameScreen object, paired with the GameScreenType argument.
            </summary>
            <exception cref="T:WeirdChess.Exceptions.GameScreenTypeException">
            Thrown if the method is called and Contains(screenType) returns FALSE.
            </exception>
            <param name="screenType">The GameScreenType of the IGameScreen that's to be retrieved.</param>
            <returns>The IGameScreen object that's paired with the screenType argument.</returns>
        </member>
        <member name="M:WeirdChess.Interfaces.IScreenController.Contains(WeirdChess.Enums.GameScreenType)">
            <summary>
            Checks whether the IGameScreen collection contains a pair, with the provided GameScreenType.
            </summary>
            <param name="screenType">The GameScreenType for the GameScreenType/IGameScreen pair.</param>
            <returns>
            True if the pair is found.
            False if the pair is not found. 
            </returns>
        </member>
        <member name="M:WeirdChess.Infrastructure.ScreenController.#ctor">
            <summary>
            Contructor which takes a Game object as argument.
            </summary>
        </member>
        <member name="T:WeirdChess.Interfaces.IDeserialiser`1">
            <summary>
            Interface for Deserialiser objects
            </summary>
            <typeparam name="T">Specifies the return type of the Deserialise method. 
            Can only be an object, which implments ISavable</typeparam>
        </member>
        <member name="M:WeirdChess.Interfaces.IDeserialiser`1.Deserialize(System.String)">
            <summary>
            When called, reads the file, 
            specified by the FilePath property and returns the information from it, as a new ISavable object.
            </summary>
            <param name="filePath">The path to the target file</param>
            <returns>A new ISavable object, containing the deserialised information.</returns>
        </member>
        <member name="T:WeirdChess.Interfaces.IIterator`1">
            <summary>
            Interface for Iterating through various collections.
            </summary>
        </member>
        <member name="M:WeirdChess.Interfaces.IIterator`1.First">
            <summary>
            Sets the indexer to the first element of the collection.
            This is the default position of the indexer.
            </summary>
        </member>
        <member name="M:WeirdChess.Interfaces.IIterator`1.Next">
            <summary>
            Moves the indexer one position towards the Last element.
            </summary>
        </member>
        <member name="M:WeirdChess.Interfaces.IIterator`1.Previous">
            <summary>
            Moves the indexer one position towards the First element.
            </summary>
        </member>
        <member name="M:WeirdChess.Interfaces.IIterator`1.Last">
            <summary>
            Sets the indexer to the last element of the collection.
            </summary>
        </member>
        <member name="M:WeirdChess.Interfaces.IIterator`1.Current">
            <summary>
            Returns the element that the indexer currently points to.
            </summary>
            <exception cref="T:WeirdChess.Exceptions.IteratorOutOfRangeException">Thrown when method is called and IsDone() returns TRUE</exception>
            <returns></returns>
        </member>
        <member name="M:WeirdChess.Interfaces.IIterator`1.IsDone">
            <summary>
            Checks whether the curent indexer position is within the boundaries of the collection.
            </summary>
            <returns>
            True if the current position is outside the collection boundaries.
            False if the current position is inside the collection boundaries.
            </returns>
        </member>
        <member name="T:WeirdChess.Interfaces.ISavable">
            <summary>
            Interface for objects, which can be read and saved to a file.
            Contains methods for parsing objects to different types.
            </summary>
        </member>
        <member name="M:WeirdChess.Interfaces.ISavable.IsSetting">
            <summary>
            Checks if the current object implements the ISettings interface.
            </summary>
            <returns>True if the object implements ISettings</returns>
        </member>
        <member name="M:WeirdChess.Interfaces.ISavable.AsSettings">
            <summary>
            Attempts to cast the current object to an ISettings object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WeirdChess.Interfaces.ISerialisationTool`1">
            <summary>
            Interface for Serialisation Tool objects. 
            Contains a Serialise and Deserialise methods, created automatically upon initialisation.
            </summary>
            <typeparam name="T">An ISavable object, specifying the type of the ISerialiser and IDeserialiser objects</typeparam>
        </member>
        <member name="M:WeirdChess.Interfaces.ISerialisationTool`1.Serialise(`0)">
            <summary>
            Serialises the ISavable object from the argument into the file, specified in the FilePath property.
            </summary>
            <param name="savableObject">The ISavable object, containing the information that's to be serialised.</param>
        </member>
        <member name="M:WeirdChess.Interfaces.ISerialisationTool`1.Deserialise">
            <summary>
            Deserialises the information from the file, specified in the FilePath property, into an ISavable object.
            </summary>
            <returns>The deserialised information, as an ISavable object</returns>
        </member>
        <member name="P:WeirdChess.Interfaces.ISerialisationTool`1.FilePath">
            <summary>
            The target file path specified within the object constructor.
            </summary>
        </member>
        <member name="T:WeirdChess.Interfaces.ISerialisationToolFactory`1">
            <summary>
            Interface for Factory objects, used for creating ISerialisationTool objects.
            </summary>
            <typeparam name="T">An ISavable object, specifying the type of objects that we want to serialise/deserialise</typeparam>
        </member>
        <member name="M:WeirdChess.Interfaces.ISerialisationToolFactory`1.CreateTool(System.String)">
            <summary>
            The factory method for creating ISerialisationTool objects.
            </summary>
            <param name="filePath">The path for the file that's to be used in the ISerialiser/IDeserialiser objects</param>
            <returns>An ISerialisationTool object</returns>
        </member>
        <member name="T:WeirdChess.Interfaces.ISerialiser`1">
            <summary>
            Interface for Serialiser objects.
            </summary>
            <typeparam name="T">Specifies the argument type of the object to be serialised.
            Can only be an object, which implements ISavable</typeparam>
        </member>
        <member name="M:WeirdChess.Interfaces.ISerialiser`1.Serialise(System.String,`0)">
            <summary>
            Writes the information from the T object to to the file specified by the FilePath property.
            </summary>
            <param name="filePath">The path to the target file.</param>
            <param name="settings">An ISavable object which contains the information to be written to the file.</param>
        </member>
        <member name="T:WeirdChess.Interfaces.ISettingFactory">
            <summary>
            Interface for Settings Factory objects
            </summary>
        </member>
        <member name="M:WeirdChess.Interfaces.ISettingFactory.CreateSetting(WeirdChess.Enums.SettingType,System.Object)">
            <summary>
            Method for creating ISetting objects.
            </summary>
            <param name="settingType">The type of the new ISetting object.</param>
            <param name="settingValue">The value of the new ISetting object.</param>
            <returns>A new ISetting object, created with the method arguments.</returns>
        </member>
        <member name="T:WeirdChess.Interfaces.ISettings">
            <summary>
            An interface for ISettings objects. Implments ISavable.
            </summary>
        </member>
        <member name="M:WeirdChess.Interfaces.ISettings.GetSetting(WeirdChess.Enums.SettingType)">
            <summary>
            Method for retreiving the specified ISetting object.
            </summary>
            <param name="settingType">The setting type which is to be returned</param>
            <returns>An ISetting object, corresponding to the specified SettingType argument</returns>
        </member>
        <member name="M:WeirdChess.Interfaces.ISettings.SetSetting(WeirdChess.Enums.SettingType,System.Object)">
            <summary>
            Method for setting values on ISetting objects. 
            </summary>
            <param name="settingType">The setting type whose value will be changed</param>
            <param name="value">The new value for the specified ISetting object</param>
        </member>
        <member name="T:WeirdChess.Interfaces.ISettingsController">
            <summary>
            Interface for Settings Controller objects
            </summary>
        </member>
        <member name="M:WeirdChess.Interfaces.ISettingsController.SaveSettings">
            <summary>
            Saves the current ISettings object, using the ISerialisationTool object.
            The save only occurs if the new settings are different than the old ones.
            </summary>
        </member>
        <member name="P:WeirdChess.Interfaces.ISettingsController.Settings">
            <summary>
            Property containing the current settings, specified in the settings init file.
            If the init file does not exist, it is created with the default values and the same are loaded in the ISettings object.
            </summary>
        </member>
        <member name="T:WeirdChess.Utilities.AllowedSettings">
            <summary>
            Static class holding collections of allowed values for ISetting objects
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:WeirdChess.Utilities.AllowedSettings.ScreenResolutionValues" -->
        <member name="F:WeirdChess.Utilities.AllowedSettings.MusicOptionValues">
            <summary>
            Array of allowed MusicOption values.
            </summary>
        </member>
        <member name="F:WeirdChess.Utilities.AllowedSettings.SoundOptionValues">
            <summary>
            Array of allowed SoundOption values.
            </summary>
        </member>
        <member name="F:WeirdChess.Utilities.AllowedSettings.MusicVolumeValues">
            <summary>
            Array of allowed Music Volume values.
            </summary>
        </member>
        <member name="F:WeirdChess.Utilities.AllowedSettings.SoundVolumeValues">
            <summary>
            Array of allowed Sound Volume values.
            </summary>
        </member>
        <member name="T:WeirdChess.Utilities.Iterator`1">
            <summary>
            Implementation of IIterator
            </summary>
            <typeparam name="T">The generic type of the IIterator object</typeparam>
        </member>
        <member name="M:WeirdChess.Utilities.Iterator`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Constructor which takes an ICollection as argument.
            The ICollection generic type should be the same as the IIterator generic type. 
            </summary>
            <param name="collection">The col that IIterator will iterate through</param>
        </member>
        <member name="M:WeirdChess.Utilities.Iterator`1.#ctor(System.Collections.Generic.ICollection{`0},System.Int32)">
            <summary>
            Constructor which takes ICollection and startIndex arguments
            </summary>
            <param name="collection">The col that IIterator will iterate through</param>
            <param name="startIndex">The index of the first element</param>
        </member>
        <member name="M:WeirdChess.Utilities.Iterator`1.#ctor(System.Collections.Generic.ICollection{`0},System.Int32,System.Int32)">
            <summary>
            Constructor which takes ICollection, startIndex and endIndex arguments
            </summary>
            <param name="collection">The col that IIterator will iterate through</param>
            <param name="startIndex">The index of the first element</param>
            <param name="endIndex">The index of the last element</param>
        </member>
        <member name="T:WeirdChess.Utilities.Messages">
            <summary>
            Class containing constant messages
            </summary>
        </member>
    </members>
</doc>

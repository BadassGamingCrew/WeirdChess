// <auto-generated />

using System.Collections.Generic;

namespace WeirdChess.Interfaces
{
    using Exceptions;
    /// <summary>
    /// Interface for Iterating through various collections.
    /// </summary>
    public interface IIterator<out T>
    {
        /// <summary>
        /// Sets the indexer to the first element of the collection.
        /// This is the default position of the indexer.
        /// </summary>
        void First();
        /// <summary>
        /// Moves the indexer one position towards the Last element.
        /// </summary>
        void Next();
        /// <summary>
        /// Moves the indexer one position towards the First element.
        /// </summary>
        void Previous();
        /// <summary>
        /// Sets the indexer to the last element of the collection.
        /// </summary>
        void Last();
        /// <summary>
        /// Returns the element that the indexer currently points to.
        /// </summary>
        /// <exception cref="IteratorOutOfRangeException">Thrown when method is called and IsDone() returns TRUE</exception>
        /// <returns></returns>
        T Current();
        /// <summary>
        /// Checks whether the curent indexer position is within the boundaries of the collection.
        /// </summary>
        /// <returns>
        /// True if the current position is outside the collection boundaries.
        /// False if the current position is inside the collection boundaries.
        /// </returns>
        bool IsDone();
    }
}

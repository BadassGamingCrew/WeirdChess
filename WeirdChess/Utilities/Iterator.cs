// <auto-generated />
namespace WeirdChess.Utilities
{
    using System;
    using System.Collections.Generic;
    using Interfaces;
    /// <summary>
    /// Implementation of IIterator
    /// </summary>
    /// <typeparam name="T">The generic type of the IIterator object</typeparam>
    public class Iterator<T> : IIterator<T>
    {
        private ICollection<T> collection; 
        /// <summary>
        /// Constructor which takes an ICollection as argument.
        /// The ICollection generic type should be the same as the IIterator generic type. 
        /// </summary>
        /// <param name="collection">The collection that IIterator will iterate through</param>
        public Iterator(ICollection<T> collection)
        {
            this.collection = collection;
        }

        public void First()
        {
            throw new NotImplementedException();
        }

        public void Next()
        {
            throw new NotImplementedException();
        }

        public void Previous()
        {
            throw new NotImplementedException();
        }

        public void Last()
        {
            throw new NotImplementedException();
        }

        public T Current()
        {
            throw new NotImplementedException();
        }

        public bool IsDone()
        {
            throw new NotImplementedException();
        }
    }
}

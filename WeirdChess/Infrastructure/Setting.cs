// <auto-generated />
namespace WeirdChess.Infrastructure
{
    using Enums;
    using System.Linq;
    using Exceptions;
    using Interfaces;
    /// <summary>
    /// Abstract class for ISetting objects
    /// </summary>
    public abstract class Setting : ISetting
    {
        private readonly object[] validValues;
        private readonly string valueErrorMessage;
        private object value;
        /// <summary>
        /// Constructor which takes two arguments.
        /// </summary>
        /// <param name="type">The Setting Type of the ISetting object</param>
        /// <param name="value">The value for the ISetting object</param>
        /// <param name="validValues">Collection of valid values for this SettingType</param>
        /// <param name="valueErrorMessage">The error message to be thrown, if an InvalidSettingValueException occurs</param>
        protected Setting(SettingType type, object value, object[] validValues, string valueErrorMessage)
        {
            this.Type = type;
            this.Value = value;
            this.validValues = validValues;
            this.valueErrorMessage = valueErrorMessage;
        }

        public SettingType Type { get; private set; }

        public object Value 
        {
            get { return this.value; }
            private set
            {
                if (!this.validValues.Contains(value))
                {
                    throw new InvalidSettingValueException(value.ToString(), this.valueErrorMessage);
                }
                this.value = value;
            }
        }
    }
}

// <auto-generated />
namespace WeirdChess.Infrastructure
{
    using System;
    using Enums;
    using Exceptions;
    using Interfaces;
    using Utilities;
    /// <summary>
    /// Abstract class for Screen objects. 
    /// Implements IGameScreen, IComponent and IDrawableComponent
    /// </summary>
    public abstract class Screen : IGameScreen, IComponent, IDrawableComponent
    {
        private IDrawable drawableComponent;
        /// <summary>
        /// Consctructor for Screen objects. Takes a GameScreenType enum as argument
        /// </summary>
        /// <param name="type">The Type of the Screen object</param>
        protected Screen(GameScreenType type) 
        {
            this.Type = type;
        }
        /// <summary>
        /// GameScreenType property. The setter is private since the value should be read-only.
        /// </summary>
        public GameScreenType Type { get; private set; }
        /// <summary>
        /// Boolean property specifying whether the screen should be displayed, or not.
        /// </summary>
        public bool Displayed { get; set; }
        /// <summary>
        /// Property containing the IDrawable object for this current object.
        /// The setter is protected, since the child classes will be responcible for specifying the IDrawable object.
        /// </summary>
        public IDrawable DrawableComponent
        {
            get
            {
                this.VerifyDrawableComponent();
                return this.drawableComponent;
            }
            protected set
            {
                this.drawableComponent = value;
            }
        }

        public void Initilize()
        {
            throw new NotImplementedException();
        }

        public void Update()
        {
            throw new NotImplementedException();
        }

        private void VerifyDrawableComponent()
        {
            if (this.drawableComponent == default(IDrawable))
            {
                throw new DrawableComponentException(string.Format(Messages.DrawableObjectNotSet, this.GetType().FullName));
            }
        }
    }
}
